#include "wholth/c/entity/nutrient.h"
#include "wholth/c/food_nutrients.h"
#include "wholth/c/internal.hpp"
#include "wholth/controller/abstract_page.hpp"
#include "wholth/entity/food.hpp"
#include "wholth/model/expanded_food.hpp"
#include "wholth/utils/to_string_view.hpp"

// static_assert(sizeof(wholth::entity::Nutrient) == sizeof(wholth_Nutrient));

static const auto& g_context = wholth::c::internal::global_context();

static wholth::model::NutrientsContainer<wholth_Nutrient, 20>
    g_nutrients_container;

static auto& model()
{
    static wholth::model::NutrientsPage g_food_nutrients_page_model{
        g_context, g_nutrients_container.size};
    return g_food_nutrients_page_model;
}

extern "C" void wholth_food_nutrients_food_id(const wholth_StringView food_id)
{
    // todo precondition
    model().food_id = {food_id.data, food_id.size};
}

extern "C" void wholth_food_nutrients_title(const wholth_StringView title)
{
    // todo precondition
    model().title = {title.data, title.size};
}

extern "C" const wholth_NutrientArray wholth_food_nutrients()
{
    const auto& vector =
        g_nutrients_container.swappable_buffer_views.view_current().view;

    const auto& pagination = model().pagination;

    assertm(
        vector.size() >= pagination.span_size(),
        "You done goofed here wholth_food_nutrients() [1]!");
    return {vector.data(), pagination.span_size()};
}

extern "C" const wholth_Page wholth_food_nutrients_pagination()
{
    const auto& page = model().pagination;

    return {
        .max_page = page.max_page(),
        .cur_page = page.current_page(),
    };
}

extern "C" void wholth_food_nutrients_fetch()
{
    wholth::controller::fill_container_through_model(
        g_nutrients_container, model(), g_context.connection);
}

extern "C" bool wholth_food_nutrients_advance(uint64_t by)
{
    return wholth::controller::advance(model(), by);
}

extern "C" bool wholth_food_nutrients_retreat(uint64_t by)
{
    return wholth::controller::retreat(model(), by);
}

extern "C" bool wholth_food_nutrients_skip_to(uint64_t page)
{
    return wholth::controller::skip_to(model(), page);
}
